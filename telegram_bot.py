from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import aiohttp
import re
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WEBHOOK_URL_BUY, SECRET_FINANDY_BUY
from logger import setup_logger

logger = setup_logger('telegram_bot')

# Initialize Telegram bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.callback_query()
async def process_callback(callback_query: types.CallbackQuery):
    try:
        # Extract ticker from callback data
        ticker = callback_query.data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL –∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        if not WEBHOOK_URL_BUY:
            raise ValueError("WEBHOOK_URL_BUY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        if not SECRET_FINANDY_BUY:
            raise ValueError("SECRET_FINANDY_BUY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # Prepare the request data
        request_data = {
            "name": "Buy OS",
            "secret": SECRET_FINANDY_BUY,
            "symbol": ticker,
            "side": "buy"
        }
        
        # Log request data
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: URL: {WEBHOOK_URL_BUY}, –î–∞–Ω–Ω—ã–µ: {request_data}")
        
        # Send POST request to the other service
        async with aiohttp.ClientSession() as session:
            async with session.post(WEBHOOK_URL_BUY, json=request_data) as response:
                # Get response data
                response_data = await response.text()
                logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –°—Ç–∞—Ç—É—Å: {response.status}, –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response_data}")
                
                if response.status == 200:
                    await callback_query.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def send_trading_signal(message_text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –≤ Telegram
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        ticker_match = re.search(r'Symbol = (.*?) OS/OB signal', message_text)
        if not ticker_match:
            raise ValueError("No ticker found in message")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        ticker = ticker_match.group(1)
        
        # Create TradingView URL
        tradingview_url = f"https://www.tradingview.com/chart/?symbol={ticker}&interval=1H"
        
        # Create inline keyboard
        builder = InlineKeyboardBuilder()
        builder.button(text="üìà –û—Ç–∫—Ä—ã—Ç—å –≤ TradingView", url=tradingview_url)
        builder.button(text="üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=ticker)
        builder.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥
        
        # Format message with timestamp
        formatted_message = f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{ticker}\n\nOS/OB signal\n\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        
        # Send message to Telegram with inline keyboard
        await bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=formatted_message,
            reply_markup=builder.as_markup()
        )
            
        return {"status": "success", "message": "Message sent successfully"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise 